1. Cargar el respaldo de la base de datos unidad2.sql.

- En primer lugar el archivo unidad2.sql lo ubico en la carpeta C:\Program Files\PostgreSQL\10\bin
- Creo la base de datos llamada "unidad2" en pgAdmin.
- Luego desde la consola del sistema ejecutamos los siguientes comandos: 
	* Nos ubicamos en  C:\Program Files\PostgreSQL\10\bin
	* Ejecutamos el comando: psql -h localhost -p 5432 -U postgres -f unidad2.sql unidad2
	* Introduzco la contraseña para el usuario postgres y presionamos enter.
- Obtenemos el siguiente resultado: 
	SET
SET
SET
SET
SET
 set_config
------------

(1 fila)


SET
SET
SET
SET
CREATE EXTENSION
COMMENT
SET
SET
CREATE TABLE
ALTER TABLE
CREATE SEQUENCE
ALTER TABLE
ALTER SEQUENCE
CREATE TABLE
ALTER TABLE
CREATE SEQUENCE
ALTER TABLE
ALTER SEQUENCE
CREATE TABLE
ALTER TABLE
CREATE SEQUENCE
ALTER TABLE
ALTER SEQUENCE
CREATE TABLE
ALTER TABLE
CREATE SEQUENCE
ALTER TABLE
ALTER SEQUENCE
ALTER TABLE
ALTER TABLE
ALTER TABLE
ALTER TABLE
COPY 10
COPY 32
COPY 42
COPY 20
 setval
--------
     12
(1 fila)


 setval
--------
     38
(1 fila)


 setval
--------
     60
(1 fila)


 setval
--------
     20
(1 fila)


ALTER TABLE
ALTER TABLE
ALTER TABLE
ALTER TABLE
ALTER TABLE
ALTER TABLE
ALTER TABLE
ALTER TABLE

- Luego al revisar en pgAdmin se observan las tablas cargadas con todos sus datos.

-------------------------------------------------------------------------------------------------
2. El cliente usuario01 ha realizado la siguiente compra:
	● producto: producto9
	● cantidad: 5
	● fecha: fecha del sistema
Mediante el uso de transacciones, realiza las consultas correspondientes para este
requerimiento y luego consulta la tabla producto para validar si fue efectivamente
descontado en el stock.

BEGIN;
INSERT INTO compra (id, cliente_id, fecha) VALUES (33, 1, current_timestamp);
INSERT INTO detalle_compra (id, producto_id, compra_id, cantidad) VALUES (43, 9, 33, 5);
UPDATE producto SET stock = stock - 5 WHERE id = 9;
COMMIT;

--------------------------------------------------------------------------------------------------
3. El cliente usuario02 ha realizado la siguiente compra:
	● producto: producto1, producto 2, producto 8
	● cantidad: 3 de cada producto
	● fecha: fecha del sistema
Mediante el uso de transacciones, realiza las consultas correspondientes para este
requerimiento y luego consulta la tabla producto para validar que si alguno de ellos
se queda sin stock, no se realice la compra.

BEGIN;
INSERT INTO compra (id, cliente_id, fecha) VALUES (34, 2, current_timestamp);
INSERT INTO detalle_compra (id, producto_id, compra_id, cantidad) VALUES (44, 1, 34, 3);
UPDATE producto SET stock = stock - 3 WHERE id = 1;
SAVEPOINT checkpoint1;
INSERT INTO detalle_compra (id, producto_id, compra_id, cantidad) VALUES (45, 2, 34, 3);
UPDATE producto SET stock = stock - 3 WHERE id = 2;
SAVEPOINT checkpoint2;
INSERT INTO detalle_compra (id, producto_id, compra_id, cantidad) VALUES (46, 8, 34, 3);
UPDATE producto SET stock = stock - 3 WHERE id = 8;
ROLLBACK TO checkpoint2;
COMMIT;

- Al consultar la tabla compra se genera la siguiente fila:
 	id | cliente_id |   fecha
 	34 |	 2	| "2022-02-13"
- Al consultar la tabla detalle_compra se generan las siguientes filas: 
 	id | producto_id | compra_id | cantidad
	44 |           1 |        34 |        3
 	45 |           2 |        34 |        3

- Al consultar la tabla producto se descuntan los productos comprados, y el producto 8 se mantiene en 0:
	id | descripcion | stock | precio
	 1 | producto1   |     3 |   9107
  	 2 | producto2   |     2 |   1760
  	 8 | producto8   |     0 |   8923

--------------------------------------------------------------------------------------------------------
4. Realizar las siguientes consultas:

	a. Deshabilitar el AUTOCOMMIT
	b. Insertar un nuevo cliente
	c. Confirmar que fue agregado en la tabla cliente
	d. Realizar un ROLLBACK
	e. Confirmar que se restauró la información, sin considerar la inserción del punto b
	f. Habilitar de nuevo el AUTOCOMMIT




	a. \set AUTOCOMMIT off

	b. SAVEPOINT checkpoint1;
	   INSERT INTO cliente (id, nombre, email) VALUES (11, 'usuario011', 'usuario011@gmail.com');
	   COMMIT;

	c. SELECT * FROM cliente;
   obtenemos:  id |   nombre   |         email
		----+------------+------------------------
  		1 | usuario01  | usuario01@gmail.com
		2 | usuario02  | usuario02@yahoo.com
  		3 | usuario03  | usuario03@hotmail.com
  		4 | usuario04  | usuario04@hotmail.com
  		5 | usuario05  | usuario05@yahoo.com
  		6 | usuario06  | usuario06@hotmail.com
  		7 | usuario07  | usuario07@yahoo.com
  		8 | usuario08  | usuario08@yahoo.com
  		9 | usuario09  | usuario09@hotmail.com
 		10| usuario010 | usuario010@hotmail.com
 		11| usuario011 | usuario011@gmail.com

	d. ROLLBACK TO checkpoint1;

	e. SELECT * FROM cliente;
   obtenemos:  id |   nombre   |         email
		----+------------+------------------------
  		1 | usuario01  | usuario01@gmail.com
		2 | usuario02  | usuario02@yahoo.com
  		3 | usuario03  | usuario03@hotmail.com
  		4 | usuario04  | usuario04@hotmail.com
  		5 | usuario05  | usuario05@yahoo.com
  		6 | usuario06  | usuario06@hotmail.com
  		7 | usuario07  | usuario07@yahoo.com
  		8 | usuario08  | usuario08@yahoo.com
  		9 | usuario09  | usuario09@hotmail.com
 		10| usuario010 | usuario010@hotmail.com

	f. \set AUTOCOMMIT on

